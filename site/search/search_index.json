{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Essential GRASS GIS Guide","text":"<p>Welcome to The Essential GRASS GIS Guide \u2013 Whether you're a student, researcher, or GIS professional, this guide is designed to help you confidently start using GRASS GIS, one of the most powerful open-source geospatial tools available today, for spatial data analysis, raster/vector processing, and complex geospatial workflows.</p> <p></p>"},{"location":"#introduction-to-grass-gis","title":"Introduction to GRASS GIS","text":"<p>GRASS GIS (Geographic Resources Analysis Support System) is a powerful open-source Geographic Information System (GIS) used for geospatial data management, analysis, image processing, and spatial modeling. It has been actively developed since the 1980s and is supported by the OSGeo Foundation.</p>"},{"location":"#why-use-grass-gis","title":"Why Use GRASS GIS?","text":"<ul> <li>Open Source and Free: No licensing fees, fully community-supported.</li> <li> <p>Powerful Analysis Tools: Ideal for advanced geospatial modeling and automation.</p> </li> <li> <p>Cross-platform Compatibility: Available on Windows, macOS, and Linux.</p> </li> <li>Integration Ready: Works well with Python, PostgreSQL/PostGIS, and other open-source tools.</li> <li>Custom Scripting: Automate workflows using Bash or Python (PyGRASS).</li> </ul> <p>It supports reproducible, large-scale geospatial workflows and is commonly used in environmental modeling, hydrology, agriculture, remote sensing, and academic research.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Raster and vector data support with a rich set of analytical tools</li> <li>Region and mask management for precise control over analysis extents (one of my personal favorites!)</li> <li>Time-series data management and analysis</li> <li>Advanced hydrological and terrain analysis modules</li> <li>3D visualization and volume modeling</li> <li>Flexible data import/export options</li> </ul>"},{"location":"#learn-more","title":"\ud83d\udcda Learn More","text":"<ul> <li>GRASS GIS Official Site</li> <li>GRASS GIS Documentation</li> <li>Python API for GRASS</li> <li>GRASS GIS Manuals</li> <li>GRASS GIS Tutorials</li> <li>Intro to GRASS GIS Workshop</li> </ul>"},{"location":"common-commands/","title":"Common GRASS GIS Commands","text":"<p>Here are some frequently used GRASS GIS commands useful for working with rasters, vectors, regions, and exporting data.</p>"},{"location":"common-commands/#1-starting-and-managing-sessions","title":"1. Starting and Managing Sessions","text":"<pre><code># Create a new location from scratch\ngrass -c /mnt/mapdata/grassdata/new_location\n\n\n# Start GRASS in an existing location/mapset\ngrass /path/to/mapset/location\n\n# Create a new mapset inside an existing location\ng.mapset -c mapset=test location=eqipa\n\n# Switch to a different mapset\ng.mapset mapset=pcp_mean_monthly\n\n# Add multiple mapsets to current search path\ng.mapsets mapset=nrsc_lulc,ind_annual_data operation=add\n</code></pre>"},{"location":"common-commands/#2-map-and-region-management","title":"2. Map and Region Management","text":"<pre><code># Check raster resolution and extent\nr.info -g pcpm_imd_2023_10\n\n# List all rasters and vectors\ng.list type=raster,vector\n\n# List all rasters and export to file\ng.list rast map=etg_etb_ind_monthly &gt;&gt; names.txt\n\n# Set region to match a raster or vector map\ng.region raster=your_raster_map\ng.region vector=your_vector_map\n\n# View current region settings\ng.region -p\n</code></pre>"},{"location":"common-commands/#3-import-data","title":"3. Import Data","text":"<pre><code># Import a raster file (GeoTIFF, NetCDF, etc.)\nr.import input=chirps_pcp.tif output=chirps_pcp\n\n# Import a vector file (GeoJSON, Shapefile, etc.)\nv.import input=IndiaBoundary.geojson output=india_boundary\n</code></pre>"},{"location":"common-commands/#4-raster-vector-info","title":"4. Raster &amp; Vector Info","text":"<pre><code># View metadata of a raster or vector\nr.info map=chirps_pcp\nv.info map=india_boundary\n</code></pre>"},{"location":"common-commands/#5-raster-operations","title":"5. Raster Operations","text":"<pre><code># Map algebra\nr.mapcalc expression=\"output_map = raster1 + raster2\"\n\n# Zonal statistics\nr.univar map=raster_map zones=vector_zones_map\n\n# Raster statistics summary\nr.stats -a input=raster_map_name\n\n# Merge rasters\nr.patch input=map1,map2 output=merged_map\n\n# Clip raster with current region\nr.clip input=your_raster output=clipped_raster\n\n# Resample raster\nr.resample input=your_raster output=resampled_raster\n\n# Apply raster mask\nr.mask raster=mask_map\n\n# Export raster to GeoTIFF\nr.out.gdal input=raster_map output=/path/output.tif format=GTiff\n</code></pre>"},{"location":"common-commands/#6-vector-operations","title":"6. Vector Operations","text":"<pre><code># Buffer vector geometry\nv.buffer input=your_vector output=buffered_vector distance=500\n\n# Convert vector to raster\nv.to.rast input=your_vector output=rasterized_vector use=cat\n\n# Convert raster to vector\nr.to.vect input=your_raster output=vector_map feature=area\n\n# Merge vectors\nv.patch input=vector1,vector2 output=merged_vector\n\n# Export vector to Shapefile\nv.out.ogr input=vector_map output=/path/output.shp format=ESRI_Shapefile\n</code></pre> <p>Tip: Always verify the region and CRS settings (<code>g.region -p</code>) before running any spatial operation.</p>"},{"location":"concepts/","title":"Core Concepts","text":"<p>Understanding the core structure and philosophy of GRASS GIS is essential before diving into spatial analysis. GRASS GIS organizes data and operations in a unique hierarchical structure and uses powerful tools for geospatial processing.</p> <p>The main component of the Data tab is the Data Catalog which shows the GRASS GIS hierarchical structure consisting of database, project and mapset .</p> <ol> <li> <p>GRASS database (root project directory):</p> <ul> <li>GISDBASE is the directory where all GRASS GIS data is stored.</li> <li>It acts as a container that holds LOCATIONS.</li> <li>You can think of GISDBASE as the \"root folder\" where all GRASS-related data for a project is organized.</li> </ul> </li> <li> <p>Location (Project) (defines projection and extent):</p> <ul> <li>A LOCATION is a folder within GISDBASE that defines a specific coordinate system, projection, and geographic extent.</li> <li>Each LOCATION is tied to a specific Coordinate Reference System (CRS), so all maps and data within a location must use the same CRS.</li> </ul> </li> <li> <p>Mapset (stores individual data and settings):</p> <ul> <li>A MAPSET is a subdirectory inside a LOCATION where data is stored. It helps manage different workflows or user data independently, even within the same LOCATION.</li> <li>The PERMANENT mapset inside each LOCATION contains base information such as region settings (the extent and resolution) and the coordinate system. Other mapsets can be created for individual users or tasks within the same location.</li> </ul> </li> </ol> <p>\ud83d\udcd8 Read the GRASS Quickstart Guide to understand this setup better.</p>"},{"location":"concepts/#grass-gis-startup-screen","title":"GRASS GIS Startup Screen","text":"<p>When you open GRASS for the first time, a new directory is created in your home folder. This directory is called grassdata by default and stores all your GRASS projects. GRASS projects are simply folders storing your geospatial data with common coordinate reference system (CRS), ensuring consistency of your data. At the project level, data is further organized into subprojects called mapsets, which you can use to manage different subregions or analyses within a project. Each project contains a special mapset called PERMANENT, which is used to store source datasets for your analysis that can be easily accessed from other mapsets.</p> <p></p>"},{"location":"concepts/#grass-gis-database-structure","title":"GRASS GIS Database Structure","text":"Component Description <code>GISDBASE</code> Root folder where all GRASS GIS data is stored. <code>LOCATION (PROJECT)</code> Folder inside <code>GISDBASE</code> that defines a projection/CRS. All data in a LOCATION shares the same CRS. <code>MAPSET</code> Subdirectory of a LOCATION for storing actual data and managing workflows. <code>PERMANENT</code> Special mapset holding region settings and the default CRS. <code>WIND</code> File in each MAPSET that holds region resolution/extent."},{"location":"concepts/#grass-region-computational-window","title":"GRASS Region: Computational Window","text":"<p>Each analysis in GRASS operates within a defined computational region: - It specifies the geographic extent, resolution, and alignment. - You can view or set the region using the <code>g.region</code> command.</p> <p>\ud83d\udccc All raster calculations are restricted to the computational region.</p>"},{"location":"concepts/#raster-and-vector-data-models","title":"Raster and Vector Data Models","text":"<p>GRASS supports both raster and vector formats:</p> <ul> <li>Raster data represent continuous surfaces like elevation or precipitation using a grid of cells.</li> <li>Vector data store discrete features such as roads, boundaries, or points of interest using geometries (point, line, polygon).</li> </ul> <p>Common import commands:</p> <ul> <li><code>r.in.gdal</code> \u2013 Import raster data</li> <li><code>v.in.ogr</code> \u2013 Import vector data</li> </ul>"},{"location":"concepts/#command-structure-and-modules","title":"Command Structure and Modules","text":"<p>GRASS is modular: each task is handled by a command-line module.</p>"},{"location":"concepts/#standard-syntax","title":"Standard Syntax:","text":"<pre><code>module_name input=... output=... [other parameters]\n</code></pre>"},{"location":"concepts/#module-prefixes","title":"Module Prefixes:","text":"<ul> <li><code>r.</code> \u2013 Raster modules (e.g., <code>r.mapcalc</code>, <code>r.slope.aspect</code>)</li> <li><code>v.</code> \u2013 Vector modules (e.g., <code>v.buffer</code>, <code>v.overlay</code>)</li> <li><code>g.</code> \u2013 General tools (e.g., <code>g.region</code>, <code>g.list</code>)</li> <li><code>i.</code> \u2013 Imagery and remote sensing</li> <li><code>db.</code> \u2013 Database operations</li> <li><code>t.</code> \u2013 Temporal framework</li> </ul> <p>Example: <pre><code>r.slope.aspect elevation=dem slope=slope_map aspect=aspect_map\n</code></pre></p>"},{"location":"concepts/#gui-and-cli","title":"GUI and CLI","text":"<ul> <li>GUI (Graphical User Interface): Beginner-friendly interface to access tools visually.</li> <li>CLI (Command Line Interface): Powerful, scriptable, and preferred for advanced workflows.</li> </ul> <p>Both interfaces work seamlessly and reflect the same underlying operations.</p>"},{"location":"concepts/#attribute-tables-and-databases","title":"Attribute Tables and Databases","text":"<p>Each vector map can be linked to an attribute table (usually SQLite by default). GRASS provides SQL-like functionality with <code>db.select</code>, <code>db.connect</code>, etc., to manage these databases.</p>"},{"location":"concepts/#scripting-and-automation","title":"Scripting and Automation","text":"<ul> <li>GRASS supports Python scripting using the <code>grass.script</code> and <code>grass.pygrass</code> modules.</li> <li>Batch processing is possible with Bash, Makefiles, or Python Notebooks.</li> <li>This enables building automated, reproducible workflows.</li> </ul>"},{"location":"concepts/#logging-and-metadata","title":"Logging and Metadata","text":"<p>Every GRASS module logs processing history in the metadata: - View history using <code>r.info</code> or <code>v.info</code> - Helps maintain data provenance and reproducibility</p> <p>By understanding these concepts, you are now ready to begin working with raster and vector data in GRASS GIS.</p>"},{"location":"installation/","title":"Installation and Setup","text":"<p>GRASS GIS can be installed on all major operating systems, including Windows, macOS, and Linux. Follow the instructions below for your platform.</p>"},{"location":"installation/#install-grass-gis","title":"Install GRASS GIS","text":"<p>Download the latest stable release from the official site: https://grass.osgeo.org/download/ Installation Guide: https://grasswiki.osgeo.org/wiki/Installation_Guide</p> <p>Choose the installer based on your operating system:</p> <ul> <li>Standalone installer for Windows</li> <li><code>.dmg</code> package for MacOS</li> <li>Ubuntu: <pre><code>sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable\nsudo apt-get update\nsudo apt-get install grass grass-gui grass-dev\n</code></pre></li> </ul>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, launch GRASS GIS from your system menu or use the CLI: <pre><code>grass\n</code></pre> You should see the GRASS startup window asking you to select or create a Location and Mapset.</p>"},{"location":"quickstart/","title":"GRASS GIS Quickstart","text":"<p>When launching GRASS GIS for the first time, you will open a default project \"world_latlog_wgs84\" where you can find a map layer called \"country_boundaries\" showing a world map in the WGS84 coordinate system.</p> <p>The main component of the Data tab is the Data Catalog which shows the GRASS GIS hierarchical structure consisting of database, project and mapset .</p>"},{"location":"quickstart/#interface-overview","title":"Interface Overview","text":"<p>The GRASS GUI has several panels and tools:</p> <ul> <li>Layer Manager: Controls loaded map layers.</li> <li>Map Display: Shows raster/vector data.</li> <li>Data Catalog: Displays the GRASS data hierarchy.</li> <li>Console: Run GRASS commands directly.</li> <li>Modules Search Bar: Search for specific tools and commands.</li> </ul>"},{"location":"quickstart/#getting-started-with-grass-gis","title":"Getting Started with GRASS GIS","text":"<p>This section explains how to set up your working environment in GRASS GIS and import your geospatial data.</p>"},{"location":"quickstart/#1-create-a-grass-database-directory","title":"1. Create a GRASS Database Directory","text":"<p>Open a terminal and create a directory that will act as the GRASS GIS database:</p> <pre><code>mkdir -p /Volumes/ExternalSSD/eqipa_data/grassdata\n</code></pre> <p>This directory will store all Locations and Mapsets.</p> <p>This is the root directory that will contain all your GRASS locations and mapsets.</p>"},{"location":"quickstart/#2-launch-grass-gis","title":"2. Launch GRASS GIS","text":"<pre><code>grass\n</code></pre> <p>In the startup screen:</p> <ul> <li>Set GIS Database to: /Volumes/ExternalSSD/eqipa_data/grassdata</li> <li>Click on New next to Location</li> </ul>"},{"location":"quickstart/#3-create-a-new-location-using-epsg-code","title":"3. Create a New Location Using EPSG Code","text":"<p>Use grass with the -c flag to create a new Location based on a coordinate reference system (CRS). <pre><code>grass -c EPSG:4326 /Volumes/ExternalSSD/eqipa_data/grassdata/eqipa\n</code></pre> This command:</p> <ul> <li>Creates a new Location named \"eqipa\"</li> <li>Uses EPSG:4326 (WGS 84 coordinate system)</li> <li>Initializes the default PERMANENT mapset</li> </ul>"},{"location":"quickstart/#4-create-and-start-a-new-mapset","title":"4. Create and Start a New Mapset","text":"<p>Create a New Mapset <pre><code># create a new mapset \ng.mapset -c mapset=ind_monthly_data location=eqipa\n</code></pre></p> <pre><code># Launch GRASS into the new mapset\ngrass /Volumes/ExternalSSD/eqipa_data/grassdata/eqipa/ind_monthly_data\n</code></pre> <p>Notes: - The new mapset must be inside an existing location.</p> <p>List all available mapsets <pre><code>g.mapsets -l\n</code></pre></p> <p>Switch to a different mapset within the same location <pre><code>g.mapset mapset=ind_annual_data  \n</code></pre></p>"},{"location":"quickstart/#5-set-the-computational-region-optional","title":"5. Set the Computational Region (Optional)","text":"<pre><code>g.region raster=&lt;existing_raster&gt;\n# or\ng.region vector=&lt;existing_vector&gt;\n\n# Set Resolution\ng.region res=0.003\n\n# To manually set region boundaries and resolution:\ng.region n=25 s=10 e=90 w=70 res=0.01 -p\n</code></pre>"},{"location":"quickstart/#6-import-raster-data","title":"6. Import Raster Data","text":"<p>Single Raster Import <pre><code>r.import input=/path/to/raster.tif output=my_raster\n</code></pre></p> <p>Bulk Import Raster Files <pre><code>for file in /path/to/pcp_imd_monthly/*.tif; do\n    name=$(basename \"$file\" .tif)\n    r.import input=\"$file\" output=\"$name\"\ndone\n</code></pre></p>"},{"location":"quickstart/#7-import-vector-data","title":"7. Import Vector Data","text":"<p>Single Vector Import <pre><code>v.import input=/path/to/vector.shp output=my_vector\n</code></pre></p> <p>Bulk Import Vector Files <pre><code>for file in /path/to/folder/*.shp; do\n    name=$(basename \"$file\" .shp)\n    v.import input=\"$file\" output=\"$name\"\ndone\n</code></pre></p>"},{"location":"quickstart/#8-list-imported-layers","title":"8. List Imported Layers","text":"<pre><code>g.list type=raster\ng.list type=vector\n</code></pre>"},{"location":"quickstart/#9-view-layer-metadata","title":"9. View Layer Metadata","text":"<pre><code>r.info my_raster\nr.info -g my_raster\n\nv.info my_vector\n</code></pre>"},{"location":"quickstart/#10-exit-grass-gis","title":"10. Exit GRASS GIS","text":"<pre><code>exit\n</code></pre>"},{"location":"raster_basics/","title":"Raster Analysis","text":"<p>This section introduces fundamental raster operations in GRASS GIS. You'll learn how to perform map algebra, clipping rasters to a boundary, statistical summaries, LULC masking, raster algebra, and temporal aggregation.</p>"},{"location":"raster_basics/#clip-raster-to-a-boundary","title":"Clip Raster to a Boundary","text":"<pre><code># Set region to match vector boundary\ng.region vector=command_boundary align=wapor_eta_m_2023_01 -p\n\n# Create a mask using the boundary\nr.mask vector=command_boundary\n\n# Clip the raster\nr.mapcalc \"eta_clipped = wapor_eta_m_2023_01\"\n\n# Remove the mask after clipping\nr.mask -r\n</code></pre>"},{"location":"raster_basics/#get-raster-statistics-min-max-mean-median","title":"Get Raster Statistics (min, max, mean, median)","text":"<pre><code># Basic stats:\nr.univar map=eta_clipped -g\n\n# For median and advanced stats:\nr.stats -aCn input=eta_clipped\n\n# For raster category counts, area and values:\nr.report map=eta_clipped units=h,c,p\n</code></pre>"},{"location":"raster_basics/#lulc-masking-eg-mask-only-cropland-areas","title":"LULC Masking (e.g., Mask only Cropland Areas)","text":"<pre><code># Assuming you have an LULC raster (esa_lulc_2021) where value 40 = cropland:\nr.mapcalc \"cropland_mask = if(esa_lulc_2021 == 40, 1, null())\"\nr.mask raster=cropland_mask\n\n# Apply it to another raster:\nr.mapcalc \"eta_cropland = wapor_eta_m_2023_01\"\n\n# Then remove the mask:\nr.mask -r\n</code></pre>"},{"location":"raster_basics/#raster-calculation","title":"Raster Calculation","text":"<pre><code># Water Productivity (WP)\nr.mapcalc \"wp_2023_01 = tbp_2023_01 / (wapor_eta_m_2023_01 * 10)\"\n</code></pre>"},{"location":"raster_basics/#temporal-raster-analysis","title":"Temporal Raster Analysis","text":"<pre><code># Mean over years\nr.series input=wapor_eta_a_2018,wapor_eta_a_2019,wapor_eta_a_2020,wapor_eta_a_2021 output=eta_mean_2018_2021 method=average\n\n# Max or Min over years\nr.series input=wapor_eta_a_2018,wapor_eta_a_2019,wapor_eta_a_2020,wapor_eta_a_2021 output=eta_max_2018_2021 method=maximum\n\n# Aggregate Monthly to Annual Raster: Annual Sum\nr.series input=$(g.list type=raster pattern=\"wapor_eta_m_2023_*\" separator=comma) output=wapor_eta_a_2023_sum method=sum\n\n# Aggregate Monthly to Annual Raster: Annual Mean\nr.series input=$(g.list type=raster pattern=\"wapor_eta_m_2023_*\" separator=comma) output=wapor_eta_a_2023_mean method=average\n</code></pre>"},{"location":"scripting/","title":"GRASS GIS Scripting with Python","text":"<p>GRASS GIS can be automated and extended using Python. This page demonstrates how to write a complete geospatial analysis workflow using GRASS GIS commands in Python using <code>grass.script</code> and <code>pygrass</code>.</p> <ul> <li>Python Scripts   \u27a1\ufe0f Download All Scripts</li> </ul>"},{"location":"scripting/#python-script-import-raster-data","title":"Python Script: Import Raster Data","text":"<p>Import Raster files</p> <pre><code>import os\nimport sys\nimport subprocess\nimport grass.script as gs\nfrom grass.pygrass.modules.shortcuts import general as g\nfrom grass.pygrass.modules.shortcuts import raster as r\nfrom grass.pygrass.modules.shortcuts import display as d\nfrom grass.pygrass.modules.shortcuts import vector as v\nfrom grass.pygrass.gis import *\nimport grass.script as grass\nimport grass.script.setup as gsetup\nimport re\n\n\n\n\n# Main function\ndef main(gisdb, location, mapset): \n\n    os.environ['GISDBASE'] = gisdb\n    os.environ['LOCATION_NAME'] = location\n\n    # Check if mapset exists; if not, create it\n    mapset_path = os.path.join(gisdb, location, mapset)\n    if not os.path.exists(mapset_path):\n        print(f\"Mapset '{mapset}' does not exist. Creating new mapset...\")\n        # Create the new mapset\n        gs.run_command('g.mapset', flags='c', mapset=mapset, location=location, dbase=GISDBASE)\n    else:\n        print(f\"Mapset '{mapset}' already exists.\")\n\n    # Initialize GRASS session\n    gsetup.init(gisdb, location, mapset)\n    print(f\"GRASS GIS session initialized in {gisdb}/{location}/{mapset}\")\n\n\n    input_folder = \"/Volumes/ExternalSSD/eqipa_data/pcp_imd_monthly\"\n    for file in os.listdir(input_folder):\n        if file.endswith(\".tif\"):\n            full_path = os.path.join(input_folder, file)\n            name = os.path.splitext(file)[0]  \n            print(f\"Importing {file} as {name}\")\n            gs.run_command('r.import', input=full_path, output=name)\n\n\n\n\nif __name__ == '__main__':\n    GISDBASE = \"/Volumes/ExternalSSD/eqipa_data/grassdata\"\n    LOCATION_NAME = \"eqipa\"\n    MAPSET = \"data_monthly\"                 \n\n    # Call the main function\n    main(GISDBASE, LOCATION_NAME, MAPSET)\n</code></pre>"},{"location":"scripting/#python-script-resampling-of-raster-maps","title":"Python Script: Resampling of Raster Maps","text":"<p>Resampling</p> <pre><code>import os\nimport sys\nimport subprocess\nimport grass.script as gs\nfrom grass.pygrass.modules.shortcuts import general as g\nfrom grass.pygrass.modules.shortcuts import raster as r\nfrom grass.pygrass.modules.shortcuts import display as d\nfrom grass.pygrass.modules.shortcuts import vector as v\nfrom grass.pygrass.gis import *\nimport grass.script as grass\nimport grass.script.setup as gsetup\nimport re\n\n\n\n\n# Main function\ndef main(gisdb, location, mapset): \n\n    shapefile = 'IndiaBoundary.geojson' \n\n    os.environ['GISDBASE'] = gisdb\n    os.environ['LOCATION_NAME'] = location\n\n    # Check if mapset exists; if not, create it\n    mapset_path = os.path.join(gisdb, location, mapset)\n    if not os.path.exists(mapset_path):\n        print(f\"Mapset '{mapset}' does not exist. Creating new mapset...\")\n        # Create the new mapset\n        gs.run_command('g.mapset', flags='c', mapset=mapset, location=location, dbase=GISDBASE)\n    else:\n        print(f\"Mapset '{mapset}' already exists.\")\n\n    # Initialize GRASS session\n    gsetup.init(gisdb, location, mapset)\n    print(f\"GRASS GIS session initialized in {gisdb}/{location}/{mapset}\")\n\n\n\n    vector_name = os.path.splitext(os.path.basename(shapefile))[0]\n\n\n    # Import shapefile\n    gs.run_command('v.import', input=shapefile, output=vector_name, overwrite=True)\n\n    # Set region\n    gs.run_command('g.region', vector=vector_name, res=0.00292)\n\n    start_yr = '2023'\n    end_yr = '2024'\n\n\n\n    for year in range(int(start_yr), int(end_yr) + 1):\n        for month in range(1,13):\n            input_raster = f\"imd_pcp_m_{year}_{month:02d}\"\n            resampled_raster = f\"imd_pcp_resamp_m_{year}_{month:02d}\"\n\n            # This resampling only change the pixel size, will not apply any interpolation or will not change pixel value\n            gs.run_command(\n                'r.resample',\n                input=input_raster,\n                output=resampled_raster,\n                overwrite=True\n            )\n\n\n\n\n\nif __name__ == '__main__':\n    GISDBASE = \"/Volumes/ExternalSSD/eqipa_data/grassdata\"\n    LOCATION_NAME = \"eqipa\"\n    MAPSET = \"data_monthly\"                 \n\n    # Call the main function\n    main(GISDBASE, LOCATION_NAME, MAPSET)\n</code></pre>"},{"location":"scripting/#python-script-aggregate-monthly-maps-to-annual","title":"Python Script: Aggregate Monthly Maps to Annual","text":"<p>Monthly to Annual Maps</p> <pre><code>import os\nimport sys\nimport subprocess\nimport grass.script as gs\nfrom grass.pygrass.modules.shortcuts import general as g\nfrom grass.pygrass.modules.shortcuts import raster as r\nfrom grass.pygrass.modules.shortcuts import display as d\nfrom grass.pygrass.modules.shortcuts import vector as v\nfrom grass.pygrass.gis import *\nimport grass.script as grass\nimport grass.script.setup as gsetup\nimport re\n\n\n\n\n# Main function\ndef main(gisdb, location, mapset): \n\n    shapefile = 'IndiaBoundary.geojson' \n\n    os.environ['GISDBASE'] = gisdb\n    os.environ['LOCATION_NAME'] = location\n\n    # Check if mapset exists; if not, create it\n    mapset_path = os.path.join(gisdb, location, mapset)\n    if not os.path.exists(mapset_path):\n        print(f\"Mapset '{mapset}' does not exist. Creating new mapset...\")\n        # Create the new mapset\n        gs.run_command('g.mapset', flags='c', mapset=mapset, location=location, dbase=GISDBASE)\n    else:\n        print(f\"Mapset '{mapset}' already exists.\")\n\n    # Initialize GRASS session\n    gsetup.init(gisdb, location, mapset)\n    print(f\"GRASS GIS session initialized in {gisdb}/{location}/{mapset}\")\n\n\n\n    # Argi year: June - May\n    start_month='6'\n    end_month='5'\n\n    start_yr = '2023'\n    end_yr = '2023'\n\n    agri_yr_timerange = []\n\n    for year in range(int(start_yr), int(end_yr) + 1):\n        months_range = []\n\n        if int(start_month) &gt; int(end_month):\n            for month in range(int(start_month), 13):\n                months_range.append(f\"{year}_{month:02d}\")\n            for month in range(1, int(end_month) + 1):\n                months_range.append(f\"{year + 1}_{month:02d}\")\n        else:\n            for month in range(int(start_month), int(end_month) + 1):\n                months_range.append(f\"{year}_{month:02d}\")\n        agri_yr_timerange.append(months_range)\n\n        print('agri_yr_timerange',agri_yr_timerange)\n\n        timerange = range(int(start_yr), int(end_yr) + 1)\n        years = list(timerange)\n\n        # Create strings like \"2022_2023\"\n        years_str = [f\"{y}_{y + 1}\" for y in years]\n\n        print(\"years_str\")\n        print(years_str)\n\n    # Add other mapsets to the current session\n    gs.run_command('g.mapsets', mapset=\"data_monthly\", operation=\"add\")\n    vector_name = os.path.splitext(os.path.basename(shapefile))[0]\n\n\n    # Import shapefile\n    gs.run_command('v.import', input=shapefile, output=vector_name, overwrite=True)\n\n    # Set region\n    gs.run_command('g.region', vector=vector_name, res=0.00292)\n\n\n    for y in agri_yr_timerange:\n        yr = int(y[0].split(\"_\")[0]) \n        yr_string = f'{yr}_{yr + 1}' \n        print(yr_string)\n\n        eta_maps_list = [f\"wapor_eta_m_{i}\" for i in y]\n        eta_out_map_name = f'wapor_eta_a_{yr_string}'\n\n        tbp_maps_list = [f\"wapor_tbp_m_{i}\" for i in y]\n        tbp_out_map_name = f'wapor_tbp_a_{yr_string}'\n\n        pcp_maps_list = [f\"imd_pcp_resam_m_{i}\" for i in y]\n        pcp_out_map_name = f'imd_pcp_resamp_a_{yr_string}'\n\n        gs.run_command('r.series', input=eta_maps_list, output=eta_out_map_name, method='sum', overwrite=True)\n        gs.run_command('r.series', input=tbp_maps_list, output=tbp_out_map_name, method='sum', overwrite=True)\n        gs.run_command('r.series', input=pcp_maps_list, output=pcp_out_map_name, method='sum', overwrite=True)\n\n\n\n\nif __name__ == '__main__':\n    GISDBASE = \"/Volumes/ExternalSSD/eqipa_data/grassdata\"\n    LOCATION_NAME = \"eqipa\"\n    MAPSET = \"data_annual\"                 \n\n    # Call the main function\n    main(GISDBASE, LOCATION_NAME, MAPSET)\n</code></pre>"},{"location":"scripting/#python-script-raster-calculation-and-masking","title":"Python Script: Raster Calculation and Masking","text":"<p>Raster Calculation</p> <pre><code>import os\nimport sys\nimport subprocess\nimport grass.script as gs\nfrom grass.pygrass.modules.shortcuts import general as g\nfrom grass.pygrass.modules.shortcuts import raster as r\nfrom grass.pygrass.modules.shortcuts import display as d\nfrom grass.pygrass.modules.shortcuts import vector as v\nfrom grass.pygrass.gis import *\nimport grass.script as grass\nimport grass.script.setup as gsetup\nimport re\n\n\n\n\n# Main function\ndef main(gisdb, location, mapset): \n\n    shapefile = 'IndiaBoundary.geojson' \n\n    os.environ['GISDBASE'] = gisdb\n    os.environ['LOCATION_NAME'] = location\n\n    # Check if mapset exists; if not, create it\n    mapset_path = os.path.join(gisdb, location, mapset)\n    if not os.path.exists(mapset_path):\n        print(f\"Mapset '{mapset}' does not exist. Creating new mapset...\")\n        # Create the new mapset\n        gs.run_command('g.mapset', flags='c', mapset=mapset, location=location, dbase=GISDBASE)\n    else:\n        print(f\"Mapset '{mapset}' already exists.\")\n\n    # Initialize GRASS session\n    gsetup.init(gisdb, location, mapset)\n    print(f\"GRASS GIS session initialized in {gisdb}/{location}/{mapset}\")\n\n\n\n    vector_name = os.path.splitext(os.path.basename(shapefile))[0]\n\n\n    # Import shapefile\n    gs.run_command('v.import', input=shapefile, output=vector_name, overwrite=True)\n\n    g.mapsets(mapset=\"nrsc_lulc\", operation=\"add\")\n\n\n    # Set region\n    gs.run_command('g.region', vector=vector_name, res=0.00292)\n\n    start_yr = '2023'\n    end_yr = '2023'\n\n\n    timerange = range(int(start_yr), int(end_yr) + 1)\n    years = list(timerange)\n\n    years_str = [f\"{y}_{y + 1}\" for y in years]\n\n    print(\"years_str\")\n    print(years_str)\n\n\n    for y in years_str:\n        # Apply raster mask\n        # gs.run_command('r.mask', raster=f'LULC_250k_{y}', maskcats='2 3 4 5 7', overwrite=True)\n        gs.run_command('r.mask', raster=f'LULC_250k_2022_2023', maskcats='2 3 4 5 7', overwrite=True)\n\n        # Perform map calculations\n        gs.mapcalc(f\"wapor_eta_a_cropland_{y} = wapor_eta_a_{y}\", overwrite=True)\n        gs.mapcalc(f\"wapor_tbp_a_cropland_{y} = wapor_tbp_a_{y}\", overwrite=True)\n        gs.mapcalc(f\"wapor_bwp_a_{y} = wapor_tbp_a_{y} / (wapor_eta_a_{y} * 10)\",overwrite=True)\n        gs.run_command('r.mask', flags='r')\n\n\nif __name__ == '__main__':\n    GISDBASE = \"/Volumes/ExternalSSD/eqipa_data/grassdata\"\n    LOCATION_NAME = \"eqipa\"\n    MAPSET = \"data_annual\"                 \n\n    # Call the main function\n    main(GISDBASE, LOCATION_NAME, MAPSET)\n</code></pre>"},{"location":"scripting/#python-script-export-geotiffs","title":"Python Script: Export GeoTIFF's","text":"<p>Export GeoTIFF's</p> <pre><code>import os\nimport sys\nimport subprocess\nimport grass.script as gs\nfrom grass.pygrass.modules.shortcuts import general as g\nfrom grass.pygrass.modules.shortcuts import raster as r\nfrom grass.pygrass.modules.shortcuts import display as d\nfrom grass.pygrass.modules.shortcuts import vector as v\nfrom grass.pygrass.gis import *\nimport grass.script as grass\nimport grass.script.setup as gsetup\nimport re\n\n\n\n\n# Main function\ndef main(gisdb, location, mapset): \n\n\n    os.environ['GISDBASE'] = gisdb\n    os.environ['LOCATION_NAME'] = location\n\n    # Check if mapset exists; if not, create it\n    mapset_path = os.path.join(gisdb, location, mapset)\n    if not os.path.exists(mapset_path):\n        print(f\"Mapset '{mapset}' does not exist. Creating new mapset...\")\n        # Create the new mapset\n        gs.run_command('g.mapset', flags='c', mapset=mapset, location=location, dbase=GISDBASE)\n    else:\n        print(f\"Mapset '{mapset}' already exists.\")\n\n    # Initialize GRASS session\n    gsetup.init(gisdb, location, mapset)\n    print(f\"GRASS GIS session initialized in {gisdb}/{location}/{mapset}\")\n\n\n\n    # Directory to export rasters\n    export_dir = \"/Volumes/ExternalSSD/eqipa_data/pcp_resamp\"\n    if not os.path.exists(export_dir):\n        os.makedirs(export_dir)\n\n    # create list of all rasters to export\n    raster_names=[]\n    start_yr = '2023'\n    end_yr = '2023'\n\n    for year in range(int(start_yr), int(end_yr) + 1):\n        for month in range(1, 13):\n            file_name = f\"imd_pcp_resamp_m_{year}_{month:02d}\"\n            raster_names.append(file_name)\n\n\n\n    # raster_names=gs.list_grouped(type=['raster'], pattern=f'imd_pcp_resamp_m_*')['data_monthly']\n\n\n\n    # Export rasters using r.out.gdal\n    for raster in raster_names:\n        output_tif = f\"{export_dir}/{raster}.tif\"\n        gs.run_command(\n            'r.out.gdal',\n            input=raster,\n            output=output_tif,\n            format='GTiff',\n            # createopt=\"COMPRESS=LZW\",\n            overwrite=True\n        )\n        print(f\"Raster {raster} exported to {output_tif}\")\n\n\nif __name__ == '__main__':\n    GISDBASE = \"/Volumes/ExternalSSD/eqipa_data/grassdata\"\n    LOCATION_NAME = \"eqipa\"\n    MAPSET = \"data_monthly\"                 \n\n    # Call the main function\n    main(GISDBASE, LOCATION_NAME, MAPSET)\n</code></pre>"},{"location":"vector_basics/","title":"Vector Operations","text":"<p>This section explains key vector operations in GRASS GIS using command-line modules. These include buffering, overlays, filtering, attribute queries, and conversions \u2014 all handled in terminal mode.</p>"},{"location":"vector_basics/#list-vector-maps","title":"List Vector Maps","text":"<pre><code># List all available vector maps in the current mapset:\ng.list type=vector\n\n# Get basic information about a vector map:\nv.info map=roads\n\n# Check the attribute table:\nv.db.select map=roads\n</code></pre>"},{"location":"vector_basics/#create-buffers-around-features","title":"Create Buffers Around Features","text":"<pre><code># Use v.buffer to create buffer zones (e.g., 1000-meter buffer around roads):\nv.buffer input=roads output=roads_buffer distance=1000\n</code></pre>"},{"location":"vector_basics/#select-and-extract-features","title":"Select and Extract Features","text":"<pre><code># Select and Extract Features by Attribute\n# Use v.extract to filter features using SQL-like queries.\nv.extract input=roads output=highways where=\"type = 'highway'\"\n\n# Check the attribute table:\nv.db.select map=roads\n</code></pre>"},{"location":"vector_basics/#overlay-vector-layers","title":"Overlay Vector Layers","text":"<pre><code># Intersect\nv.overlay ainput=landuse binput=admin_boundaries operator=and output=landuse_admin\n# Union:\nv.overlay ainput=layer1 binput=layer2 operator=or output=combined_layer\n\n# Dissolve: Merge adjacent polygons with the same attribute\nv.dissolve input=landuse output=landuse_dissolved column=category\n</code></pre>"},{"location":"vector_basics/#convert-between-raster-and-vector","title":"Convert Between Raster and Vector","text":"<pre><code># Raster to Vector:\nr.to.vect input=classified_map output=land_units type=area\n\n\n# Vector to Raster:\nv.to.rast input=land_units output=land_raster use=cat\n</code></pre>"},{"location":"vector_basics/#reproject-a-vector-map","title":"Reproject a Vector Map","text":"<pre><code># To reproject from one location to another, use v.proj inside the target location\nv.proj location=source_location mapset=PERMANENT input=roads output=roads_projected\n</code></pre>"},{"location":"vector_basics/#export-vector-maps","title":"Export Vector Maps","text":"<pre><code># Export to Shapefile or GeoPackage:\nv.out.ogr input=roads_buffer output=roads_buffer.shp format=ESRI_Shapefile\n\n# Export to GeoJSON:\nv.out.ogr input=roads output=roads.geojson format=GeoJSON\n</code></pre>"},{"location":"zonalstats/","title":"Zonal Statistics (Terminal)","text":"<p>Zonal statistics summarize raster values (e.g., mean, sum, count) within vector zones such as administrative boundaries, watersheds, or land parcels. This guide explains how to perform zonal statistics in GRASS GIS using a GeoJSON boundary file and a raster map.</p>"},{"location":"zonalstats/#import-vector-boundary-geojson","title":"Import Vector Boundary (GeoJSON)","text":"<p>Use <code>v.in.ogr</code> to import a GeoJSON file:</p> <pre><code>v.in.ogr input=/path/to/boundaries.geojson output=zones\n</code></pre> <p>\ud83d\udd0d Check if the projection of your GeoJSON matches the current GRASS location. If not, reproject the vector (see section below).</p>"},{"location":"zonalstats/#import-raster-map","title":"Import Raster Map","text":"<p>Use r.import to bring in a GeoTIFF or similar raster file:</p> <pre><code>r.import input=/path/to/raster.tif output=my_raster\n</code></pre>"},{"location":"zonalstats/#set-computational-region","title":"Set Computational Region","text":"<p>Match the region to your raster map:</p> <pre><code>g.region raster=my_raster -p\n\n# (Optional) Expand region to fully cover vector zones:\ng.region vector=zones align=my_raster\n</code></pre>"},{"location":"zonalstats/#perform-zonal-statistics-with-vraststats","title":"Perform Zonal Statistics with v.rast.stats","text":"<p>Use the vector map (zones) to compute stats from the raster (my_raster) for each polygon:</p> <pre><code>v.rast.stats map=zones raster=my_raster column_prefix=stats method=average,sum,count\n</code></pre> <ul> <li>column_prefix: Adds columns like stats_mean, stats_sum, etc.</li> <li>method: Can be one or more of: average, sum, count, min, max, stddev</li> </ul> <p>This updates the attribute table of the vector map with the calculated values.</p>"},{"location":"zonalstats/#view-results","title":"View Results","text":"<p>Display the updated attribute table:</p> <pre><code>v.db.select map=zones\n</code></pre>"},{"location":"zonalstats/#optional-export-the-results-to-geojson-or-shapefile","title":"Optional: Export the Results to GeoJSON or Shapefile","text":"<pre><code># Export GeoJSON\nv.out.ogr input=zones output=zones_stats.geojson format=GeoJSON\n\n# or Export Shapefile\nv.out.ogr input=zones output=zones_stats.shp format=ESRI_Shapefile\n\n# or Export Attribute Table to CSV\nv.db.select map=zones separator=comma file=zones_stats.csv\n</code></pre>"},{"location":"zonalstats/#optional-reproject-geojson-if-needed","title":"(Optional) Reproject GeoJSON if Needed","text":"<p>If your GeoJSON CRS doesn't match the current GRASS location, you can either:</p> <ul> <li>Reproject using GDAL before importing, or</li> <li>Import it into a matching GRASS location, and use v.proj</li> </ul> <pre><code># Run this inside your target location\nv.proj location=source_location mapset=PERMANENT input=zones output=zones_reprojected\n</code></pre>"},{"location":"zonalstats/#grass-python-scripts","title":"GRASS Python Scripts","text":"<pre><code># Create a Python 3 virtual environment \npython3 -m venv venv\n\n# Activate the virtual environment\nsource venv/bin/activate\n\n# Install dependencies with `pip`\npip install pandas numpy geopandas openpyxl\n\n# or from requirements.txt\npip install -r requirements.txt\npip3 freeze &gt; requirements.txt\n</code></pre>"},{"location":"zonalstats/#python-script-monthly-zonal-stats","title":"Python Script: Monthly Zonal Stats","text":"<p>Monthly Zonal Stats</p> <pre><code>import os\nimport sys\nimport subprocess\nimport shutil\nimport calendar\nimport math\nimport grass.script as gs\nfrom grass.pygrass.modules.shortcuts import general as g\nfrom grass.pygrass.modules.shortcuts import raster as r\nfrom grass.pygrass.modules.shortcuts import display as d\nfrom grass.pygrass.modules.shortcuts import vector as v\nfrom grass.pygrass.gis import *\nimport grass.script as grass\nimport grass.script.setup as gsetup\nimport re\nimport numpy as np\nimport geopandas as gdf\nimport pandas as pd\nimport io\n\n\n# Main function\ndef main(gisdb, location, mapset): \n\n    geojson_file = 'StatesBoundary.geojson'\n    output_csv_path=f\"IndiaStates_monthly_zonalstats.csv\"\n    start_yr = '2023'\n    end_yr = '2024'\n\n    os.environ['GISDBASE'] = gisdb\n    os.environ['LOCATION_NAME'] = location\n\n    # Check if mapset exists; if not, create it\n    mapset_path = os.path.join(gisdb, location, mapset)\n    if not os.path.exists(mapset_path):\n        print(f\"Mapset '{mapset}' does not exist. Creating new mapset...\")\n        # Create the new mapset\n        gs.run_command('g.mapset', flags='c', mapset=mapset, location=location, dbase=GISDBASE)\n    else:\n        print(f\"Mapset '{mapset}' already exists.\")\n\n    # Initialize GRASS session\n    gsetup.init(gisdb, location, mapset)\n    print(f\"GRASS GIS session initialized in {gisdb}/{location}/{mapset}\")\n\n\n    vector_name = os.path.splitext(os.path.basename(geojson_file))[0]\n\n    v.import_(input=geojson_file, output=vector_name, overwrite=True)\n\n    g.mapsets(mapset=\"nrsc_lulc,data_annual,data_monthly\", operation=\"add\")\n\n    gs.run_command('g.region', vector=vector_name, res=0.00292)\n\n\n    for year in range(int(start_yr), int(end_yr) + 1):\n        for month in range(1,13):\n\n            raster_name=f\"imd_pcp_resam_m_{year}_{month:02d}\"\n            gs.run_command('v.rast.stats', map=vector_name, raster=raster_name, \n                column_prefix=raster_name, \n                #    method='percentile',\n                    # percentile=98,\n                method='average', \n                #    method='coeff_var', \n                # method='stddev',\n                overwrite=True)\n\n    stats_output = gs.read_command(\n        'v.db.select', map=vector_name, format=\"csv\", overwrite=True\n    )\n\n    # Use StringIO to read the data into a Pandas DataFrame\n    data = io.StringIO(stats_output)\n    df = pd.read_csv(data)\n\n    # Export the DataFrame to a CSV file\n    df.to_csv(output_csv_path, index=False)\n\n\n    print(f\"zonalstats exported successfully: {vector_name}\")\n\n\n\n\nif __name__ == '__main__':\n    GISDBASE = \"/Volumes/ExternalSSD/eqipa_data/grassdata\"\n    LOCATION_NAME = \"eqipa\"\n    MAPSET = \"eqipa_stats\"                 \n\n    # Call the main function\n    main(GISDBASE, LOCATION_NAME, MAPSET)\n</code></pre>"},{"location":"zonalstats/#python-script-eqipa-overview-stats","title":"Python script: EQIPA Overview Stats","text":"<p>We will build a Python script that:</p> <ul> <li>Initializes a GRASS session</li> <li>Imports a vector (GeoJSON) file</li> <li>Calculates zonal statistics for multiple rasters</li> <li>Derives Irrigation Performance Indicators (IPA) like Equity, Adequacy, and Cropping Intensity</li> <li>Exports results to Excel</li> </ul>"},{"location":"zonalstats/#analysis-workflow","title":"Analysis Workflow","text":"<p>The script includes the following:</p> <ul> <li>Imports the GeoJSON vector layer</li> <li>Computes zonal statistics (v.rast.stats) on multiple rasters</li> <li>Computes IPA metrics like Equity and Adequacy</li> <li>Calculates Cropland and Gross Cropped Area from pixel counts</li> <li>Exports to Excel with two sheets (Info and Stats)</li> <li>See the Full Python Script below for the complete implementation.</li> </ul> <p>Full Python Script</p> <pre><code>import os\nimport sys\nimport subprocess\nimport shutil\nimport calendar\nimport math\nimport grass.script as gs\nfrom grass.pygrass.modules.shortcuts import general as g\nfrom grass.pygrass.modules.shortcuts import raster as r\nfrom grass.pygrass.modules.shortcuts import display as d\nfrom grass.pygrass.modules.shortcuts import vector as v\nfrom grass.pygrass.gis import *\nimport grass.script as grass\nimport grass.script.setup as gsetup\nimport re\nimport numpy as np\nimport geopandas as gdf\nimport pandas as pd\n\n\n\n# Main function\ndef main(gisdb, location, mapset): \n\n    geojson_file = 'StatesBoundary.geojson'\n    selectedYear=\"2023_2024\"\n\n    os.environ['GISDBASE'] = gisdb\n    os.environ['LOCATION_NAME'] = location\n\n    # Check if mapset exists; if not, create it\n    mapset_path = os.path.join(gisdb, location, mapset)\n    if not os.path.exists(mapset_path):\n        print(f\"Mapset '{mapset}' does not exist. Creating new mapset...\")\n        # Create the new mapset\n        gs.run_command('g.mapset', flags='c', mapset=mapset, location=location, dbase=GISDBASE)\n    else:\n        print(f\"Mapset '{mapset}' already exists.\")\n\n    # Initialize GRASS session\n    gsetup.init(gisdb, location, mapset)\n    print(f\"GRASS GIS session initialized in {gisdb}/{location}/{mapset}\")\n\n\n    print(\"selected_year\",selectedYear)\n\n    file_name = os.path.splitext(geojson_file)[0]\n\n    vector_name = re.sub(r'[^a-zA-Z0-9_]', '_', file_name)\n\n    # Ensure the name starts with a letter\n    if not vector_name[0].isalpha():\n        vector_name = \"v_\" + vector_name  # Prefix with \"v_\"\n\n    # Truncate if too long (max 256 chars)\n    vector_name = vector_name[:256]\n\n\n    output_excel_path=f\"{vector_name}_{selectedYear}_zonalstats.xlsx\"\n\n    v.import_(input=geojson_file, output=vector_name, overwrite=True)\n    g.mapsets(mapset=\"nrsc_lulc,data_annual\", operation=\"add\")\n\n\n    grass.run_command(\n        \"v.to.db\",\n        map=vector_name,\n        option=\"area\",\n        columns=\"geographical_area_ha\",\n        units=\"hectares\",\n        overwrite=True\n    )\n\n\n    # Set the region to match the raster\n    # g.region(vector=vector_name, res=0.001)\n    g.region(vector=vector_name, res=0.001)\n    # 0.003 degrees \u2248 111 km * 0.003 \u2248 333 meters.\n    # 0.001 degrees \u2248 111 km * 0.001 \u2248 111 meters.\n\n    # LULC: 56m\n    # WaPOR ETa: 300m\n    # WaPOR TBP: 300m\n    # IMD PCP: 0.25 degree\n\n\n    # lcc_map=f\"LULC_250k_{selectedYear}\"\n    lcc_map=f\"LULC_250k_2022_2023\"\n    eta_map=f\"wapor_eta_a_{selectedYear}\"\n    tbp_map=f\"wapor_tbp_a_{selectedYear}\"\n    pcp_map=f\"imd_pcp_resamp_a_{selectedYear}\"\n    bwp_map =f\"wapor_bwp_a_{selectedYear}\"\n\n\n    grass.parse_command(\n            'v.rast.stats',\n            map=vector_name,\n            raster=eta_map,\n            method=['average'],\n            column_prefix=f'ETa_{selectedYear}',\n            overwrite=True\n        )\n\n    grass.parse_command(\n            'v.rast.stats',\n            map=vector_name,\n            raster=pcp_map,\n            method=['average'],\n            column_prefix=f'PCP_{selectedYear}',\n            overwrite=True\n        )\n\n\n    r.mask(raster=lcc_map, maskcats='2 3 4 5 7')\n\n    grass.mapcalc(f\"{bwp_map} = {tbp_map} / ({eta_map} * 10)\",overwrite=True)\n\n\n    grass.parse_command(\n        'v.rast.stats',\n        map=vector_name,\n        raster=eta_map,\n        method=[\"average\",\"coeff_var\" ],\n        column_prefix=f'ETa_cropland_{selectedYear}',\n        overwrite=True\n    )\n    grass.parse_command(\n            \"v.rast.stats\",\n            map=vector_name,\n            raster=eta_map,\n            column_prefix=f'ETa_cropland_{selectedYear}',\n            method=\"percentile\",\n            percentile=98,\n            overwrite=True,\n        )\n\n\n    grass.parse_command(\n            \"v.rast.stats\",\n            map=vector_name,\n            raster=tbp_map,\n            column_prefix=f'BLP_{selectedYear}',\n            method=[ \"average\"],\n            overwrite=True,\n        )\n\n    grass.parse_command(\n        \"v.rast.stats\",\n        map=vector_name,\n        raster=bwp_map,\n        column_prefix=f'BWP_{selectedYear}',\n        method=[ \"average\"],\n        overwrite=True,\n    )\n\n    r.mask(flags=\"r\")\n\n    cropland_classes = {\n            'exclusive_kharif': '2',\n            'exclusive_rabi': '3',\n            'exclusive_zaid': '4',\n            'double_crop': '5',\n            'plantation': '7'\n    }\n\n    # Iterate over each class and perform zonal statistics\n    for class_name, maskcats in cropland_classes.items():\n        # Apply mask\n        r.mask(raster=lcc_map, maskcats=maskcats)\n\n        grass.parse_command(\n            \"v.rast.stats\",\n            map=vector_name,\n            raster=lcc_map,\n            column_prefix=f\"{class_name}_pixelcount\",\n            method=[\"number\"],\n            overwrite=True,\n        )\n\n\n        # Remove mask\n        r.mask(flags=\"r\")\n\n    output_csv_path = output_excel_path.replace(\".xlsx\", \".csv\")\n\n    v.out_ogr(\n        input=vector_name,\n        output=output_csv_path,\n        format=\"CSV\",\n        overwrite=True\n    )\n\n    g.region(flags=\"d\")  \n\n\n    df = pd.read_csv(output_csv_path)\n    df = df.drop_duplicates()  \n    df.drop(columns=['cat'], inplace=True, errors='ignore')\n\n\n    coeff_var_col = f\"ETa_cropland_{selectedYear}_coeff_var\"\n    avg_col = f\"ETa_cropland_{selectedYear}_average\"\n    perc_98_col = f\"ETa_cropland_{selectedYear}_percentile_98\"\n    equity_col = f\"Equity\"\n    adequacy_col = f\"Adequacy\"\n\n\n\n    # Calculate Equity and Adequacy\n    if (\n        coeff_var_col in df.columns and \n        avg_col in df.columns and \n        perc_98_col in df.columns and \n        (df[coeff_var_col] != 0).any() and \n        (df[avg_col] != 0).any() and \n        (df[perc_98_col] != 0).any()\n    ):\n        df[equity_col] = 100 - df[coeff_var_col]\n        df[adequacy_col] = (df[avg_col] * 100) / df[perc_98_col]\n    else:\n        print(f\"Columns missing for class {class_name}. Skipping Equity and Adequacy calculations.\")\n\n    df.drop(columns=[ perc_98_col], errors='ignore', inplace=True)\n\n\n\n    for class_name in cropland_classes.keys():\n        pixel_count_col = f\"{class_name}_pixelcount_number\"\n        area_col = f\"{class_name}_area_ha\"  \n        # Calculate area in hectares for the class\n        if pixel_count_col in df.columns:\n            # df[area_col] = df[pixel_count_col] * 3020 / 10000  \n            df[area_col] = df[pixel_count_col] * 2978 / 10000  \n            df.drop(columns=[pixel_count_col], errors='ignore', inplace=True)\n\n\n    cropland_area_cols = [f\"{class_name}_area_ha\" for class_name in cropland_classes.keys()]\n    df[\"Cropland_Area_ha\"] = df[cropland_area_cols].sum(axis=1)  # Sum all class areas\n\n    for col in [f\"{class_name}_area_ha\" for class_name in cropland_classes.keys()]:\n        if col not in df.columns:\n            df[col] = 0\n        df[col] = df[col].fillna(0)\n\n\n    df[\"Gross_Cropped_Area_ha\"] = (\n        df[\"exclusive_kharif_area_ha\"]\n        + df[\"exclusive_rabi_area_ha\"]\n        + df[\"exclusive_zaid_area_ha\"]\n        + (df[\"double_crop_area_ha\"] * 2)\n        + df[\"plantation_area_ha\"]\n    )\n    df[\"Cropping_Intensity\"] = df[\"Gross_Cropped_Area_ha\"] *100/ df[\"Cropland_Area_ha\"]\n    df[\"Cropping_Intensity\"] = df[\"Cropping_Intensity\"].replace([np.inf, -np.inf, np.nan], 0)\n\n\n    df = df.round(2)\n    df.to_csv(output_csv_path, index=False)\n\n\n\n    print(f\"zonalstats exported successfully: {vector_name}\")\n\n\n\n\nif __name__ == '__main__':\n    GISDBASE = \"/Volumes/ExternalSSD/eqipa_data/grassdata\"\n    LOCATION_NAME = \"eqipa\"\n    MAPSET = \"eqipa_stats\"                 \n\n    # Call the main function\n    main(GISDBASE, LOCATION_NAME, MAPSET)\n</code></pre>"}]}